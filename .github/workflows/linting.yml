name: Lint and Analyze Code from ZIP

on:
  push:
    paths:
      - "**.zip"

permissions:
  contents: write

jobs:
  process-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find Latest Zip File
        id: find_zip
        run: |
          latest_zip=$(ls -t | grep '\.zip$' | head -n 1)
          echo "latest_zip=$latest_zip" >> $GITHUB_ENV

      - name: Unzip and Extract Relevant Folders
        run: |
          unzip -o "$latest_zip" -d extracted
          mkdir -p extracted_code
          find extracted -type d -name "masterbot" -o -name "microbots" | while read dir; do
            cp -r "$dir" extracted_code/
          done

      - name: Detect Language
        id: detect_language
        run: |
          cd extracted_code
          if find . -type f -name "*.py" | grep -q .; then
            echo "language=python" >> $GITHUB_ENV
          elif find . -type f -name "*.sh" | grep -q .; then
            echo "language=bash" >> $GITHUB_ENV
          elif find . -type f -name "*.ps1" | grep -q .; then
            echo "language=powershell" >> $GITHUB_ENV
          else
            echo "language=unknown" >> $GITHUB_ENV
          fi

      - name: Install Dependencies
        run: |
          case "$language" in
            python) pip install pylint flake8 bandit radon;;
            bash) sudo apt-get install -y shellcheck;;
            powershell) sudo apt-get install -y powershell PSScriptAnalyzer;;
          esac

      - name: Perform Linting and Security Analysis
        run: |
          mkdir -p reports
          TIMESTAMP=$(date +%s)
          REPORT_FILE="reports/lint_report_${TIMESTAMP}.html"

          # Start HTML structure
          echo "<html><head><title>Lint Report</title><style>" > "$REPORT_FILE"
          echo "body { font-family: Arial, sans-serif; padding: 20px; } h1, h2 { color: #007bff; } pre { background: #f4f4f4; padding: 10px; border-radius: 5px; }" >> "$REPORT_FILE"
          echo "</style></head><body>" >> "$REPORT_FILE"
          echo "<h1>Lint and Security Analysis Report</h1>" >> "$REPORT_FILE"
          echo "<p>Generated on: $(date)</p>" >> "$REPORT_FILE"

          case "$language" in
            python)
              echo "<h2>Python Code Analysis</h2>" >> "$REPORT_FILE"

              # Pylint Report
              echo "<h3>Pylint Report</h3><pre>" >> "$REPORT_FILE"
              pylint extracted_code/**/*.py --output-format=parseable | tee -a "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"

              # Flake8 Report
              echo "<h3>Flake8 Report</h3><pre>" >> "$REPORT_FILE"
              flake8 extracted_code/**/*.py --format=default | tee -a "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"

              # Bandit Security Report
              echo "<h3>Security Analysis (Bandit)</h3><pre>" >> "$REPORT_FILE"
              bandit -r extracted_code/**/*.py | tee -a "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"

              # Radon Complexity Report
              echo "<h3>Code Complexity (Radon)</h3><pre>" >> "$REPORT_FILE"
              radon cc extracted_code/**/*.py -a | tee -a "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"
              ;;
            
            bash)
              echo "<h2>Bash Code Analysis</h2>" >> "$REPORT_FILE"

              # ShellCheck Report
              echo "<h3>ShellCheck Report</h3><pre>" >> "$REPORT_FILE"
              find extracted_code -type f -name "*.sh" -exec shellcheck {} + | tee -a "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"
              ;;
            
            powershell)
              echo "<h2>PowerShell Code Analysis</h2>" >> "$REPORT_FILE"

              # PowerShell Linting
              echo "<h3>PSScriptAnalyzer Report</h3><pre>" >> "$REPORT_FILE"
              pwsh -Command "Get-ChildItem -Path extracted_code -Recurse -Filter '*.ps1' | Invoke-ScriptAnalyzer | Format-Table -AutoSize" | tee -a "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"
              ;;
            
            *)
              echo "<h2>No supported language found.</h2>" >> "$REPORT_FILE"
              ;;
          esac

          # Close HTML structure
          echo "</body></html>" >> "$REPORT_FILE"

      - name: Commit and Push Report
        run: |
          branch_name=${{ github.ref_name }}
          mkdir -p reports_dir/$branch_name
          mv reports/lint_report_*.html reports_dir/$branch_name/
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add reports_dir/
          git commit -m "Add lint report for latest zip"
          git push origin $branch_name
