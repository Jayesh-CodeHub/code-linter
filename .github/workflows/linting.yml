name: Lint and Analyze Code from ZIP

on:
  push:
    paths:
      - "**.zip"

permissions:
  contents: write

jobs:
  process-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find Latest Zip File
        id: find_zip
        run: |
          latest_zip=$(ls -t | grep '\.zip$' | head -n 1)
          echo "latest_zip=$latest_zip" >> $GITHUB_ENV

      - name: Unzip and Extract Relevant Folders
        run: |
          unzip -o "$latest_zip" -d extracted
          mkdir -p extracted_code
          cp -r extracted/**/masterbot extracted_code/ || echo "No masterbot directory found"
          cp -r extracted/**/microbots extracted_code/ || echo "No microbots directory found"

      - name: Detect Languages
        run: |
          if find extracted_code -type f -name "*.py" | grep -q .; then
            echo "python_detected=true" >> $GITHUB_ENV
          fi
          if find extracted_code -type f -name "*.sh" | grep -q .; then
            echo "bash_detected=true" >> $GITHUB_ENV
          fi
          if find extracted_code -type f -name "*.ps1" | grep -q .; then
            echo "powershell_detected=true" >> $GITHUB_ENV
          fi

      - name: Install Dependencies
        run: |
          if [[ "$python_detected" == "true" ]]; then
            pip install pylint flake8 bandit radon
          fi
          if [[ "$bash_detected" == "true" ]]; then
            sudo apt-get install -y shellcheck
          fi
          if [[ "$powershell_detected" == "true" ]]; then
            sudo apt-get install -y powershell
            pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"
          fi

      - name: Perform Linting and Security Analysis
        run: |
          mkdir -p reports
          TIMESTAMP=$(date +%s)
          REPORT_FILE="reports/lint_report_${TIMESTAMP}.html"

          # Start HTML structure
          echo "<html><head><title>Lint Report</title><style>" > "$REPORT_FILE"
          echo "body { font-family: Arial, sans-serif; padding: 20px; } h1, h2 { color: #007bff; } pre { background: #f4f4f4; padding: 10px; border-radius: 5px; }" >> "$REPORT_FILE"
          echo "</style></head><body>" >> "$REPORT_FILE"
          echo "<h1>Lint and Security Analysis Report</h1>" >> "$REPORT_FILE"
          echo "<p>Generated on: $(date)</p>" >> "$REPORT_FILE"

          if [[ "$python_detected" == "true" ]]; then
            echo "<h2>Python Code Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>Pylint Report</h3><pre>" >> "$REPORT_FILE"
            pylint extracted_code/**/*.py --output-format=parseable 2>&1 | tee -a "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"

            echo "<h3>Flake8 Report</h3><pre>" >> "$REPORT_FILE"
            flake8 extracted_code/**/*.py --format=default 2>&1 | tee -a "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"

            echo "<h3>Security Analysis (Bandit)</h3><pre>" >> "$REPORT_FILE"
            bandit -r extracted_code/**/*.py 2>&1 | tee -a "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"

            echo "<h3>Code Complexity (Radon)</h3><pre>" >> "$REPORT_FILE"
            radon cc extracted_code/**/*.py -a 2>&1 | tee -a "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"
          fi

          if [[ "$bash_detected" == "true" ]]; then
            echo "<h2>Bash Code Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>ShellCheck Report</h3><pre>" >> "$REPORT_FILE"
            find extracted_code -type f -name "*.sh" -exec shellcheck {} + 2>&1 | tee -a "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"
          fi

          if [[ "$powershell_detected" == "true" ]]; then
            echo "<h2>PowerShell Code Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>PSScriptAnalyzer Report</h3><pre>" >> "$REPORT_FILE"
            pwsh -Command "Get-ChildItem -Path extracted_code -Recurse -Filter '*.ps1' | Invoke-ScriptAnalyzer | ForEach-Object { '\n' + ($_ | Out-String) }" 2>&1 | tee -a "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"
          fi

          echo "</body></html>" >> "$REPORT_FILE"

      - name: Commit and Push Report
        run: |
          branch_name=${{ github.ref_name }}
          mkdir -p reports_dir/$branch_name
          mv reports/lint_report_*.html reports_dir/$branch_name/
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add reports_dir/
          git commit -m "Add lint report for latest zip" || echo "No changes to commit"
          git push origin $branch_name || echo "No changes to push"
